(*
 * THIS IS AN AUTO-GENERATED FILE PRODUCED BY URUZ!
 * DO NOT EDIT THIS FILE, since any changes will be
 * lost when the build is reset via "make clean".
 * This file is based on a user-specified EBNF
 * grammar, which can be edited as desired.
 *)

open Lexing;;
open Parsing;;
(* open Flags;; *)
let eq_base (a : 'a) (b : 'a) : bool = (a = b) ;;
let rec eq_option (f : 'a -> 'a -> bool) (a : 'a option) (b : 'a option) : bool =
   match (a,b) with
   | (None,None) -> true
   | (Some(a),Some(b)) -> (f a b)
   | _ -> false
;;
let eq_pair (f1 : 'a -> 'a -> bool) (f2 : 'b -> 'b -> bool) ((p1a,p1b) : 'a * 'b) ((p2a,p2b) : 'a * 'b) : bool = ((f1 p1a p2a) && (f2 p1b p2b)) ;;
let eq_list (f : 'a -> 'a -> bool) (l1 : 'a list) (l2 : 'a list) : bool = try List.fold_left2 (fun res l1i l2i -> res && (f l1i l2i)) true l1 l2 with _ -> false;;

let rec str_option (f : 'a -> string) (o : 'a option) : string =
   match o with
   | None -> ""
   | Some(a) -> (f a)
;;

let rec str_pair (f : 'a -> string) (g : 'b -> string) ((a,b) : ('a * 'b)) : string =
   (f a)^""^
   (g b)
;;

let rec str_list (f : 'a -> string) (l : 'a list) : string =
   str_list_helper f l true

and str_list_helper (f : 'a -> string) (l : 'a list) (first : bool) : string =
   match l with
   | [] -> ""
   | a::more -> ((if (not first) then "" else "")^(f a)^(str_list_helper f more false))
let rec str_x_list (f : 'a -> string) (il : 'a list) (comma : string) : string = 
    (fst (List.fold_left
    (fun (str,flag) i ->
      (str^(if flag then "" else comma)^(f i), false)
    ) ("",true) il))
;;

  module IntMap = Map.Make(
  struct
    type t = int
    let compare = compare
  end)

  module StringMap = Map.Make(
  struct
    type t = string
    let compare = compare
  end)

  let my_unescaped s =
    let s = Str.global_replace (Str.regexp "[\\][\r][\n]") "" s in
    let s2 = Str.global_replace (Str.regexp "[\\][\n]") "" s in
    Scanf.unescaped s2

  let strip_quotes (s : string) : (string*bool) =
    let len = String.length s in
    if ((len >= 2) && (String.get s 0)='"' && (String.get s (len-1))='"')
    then (String.sub s 1 (len-2),true) else (s,false)

(* AST Data Structure *)

type start_t = program_t

 and program_t = 
   | ExprProgram of pos_t * expr_t
   | StmtProgram of pos_t * stmt_t * program_t

 and stmt_t = 
   | ConstStmt of pos_t * ident_t * expr_t
   | LetStmt of pos_t * ident_t * expr_t
   | AssignStmt of pos_t * expr_t * expr_t

 and typ_t = 
   | UnitType
   | BoolType
   | NumType
   | StrType
   | TupleType of typ_t list
   | FuncType of typ_t * typ_t

 and var_access_t = 
   | Mutable
   | Immutable

 and uop_t = 
   | NotUop
   | NegUop

 and bop_t = 
   | AndBop
   | OrBop
   | PlusBop
   | MinusBop
   | TimesBop
   | DivBop
   | EqBop
   | NeqBop
   | LtBop
   | LteBop
   | GtBop
   | GteBop

 and expr_t = 
   | VarExpr of pos_t * ident_t
   | ValExpr of pos_t * value_t
   | UopExpr of pos_t * uop_t * expr_t
   | BopExpr of pos_t * expr_t * bop_t * expr_t
   | IfExpr of pos_t * expr_t * expr_t * expr_t
   | PrintExpr of pos_t * expr_t
   | CallExpr of pos_t * expr_t * expr_t list
   | FieldExpr of pos_t * expr_t * ident_t
   | ObjectExpr of pos_t * field_t list

 and expr1_t = expr_t

 and value_t = 
   | NumVal of float
   | BoolVal of bool
   | StrVal of string
   | UndefVal
   | ClosureVal of name_map_t * lambda_t
   | RefVal of address_t

 and ident_t = string

 and address_t = int

 and typed_ident_t = (ident_t * typ_t option)

 and name_map_t = (int StringMap.t)

 and lambda_t = (ident_t option * typed_ident_t list * block_t * typ_t option)

 and value1_t = value_t

 and lambda1_t = lambda_t

 and lambda1_0_1_t = (string option)

 and block_t = 
   | ReturnBlock of pos_t * expr_t
   | StmtBlock of pos_t * stmt_t * block_t

 and field_list_t = (field_t list)

 and field_list_1_1_t = (field_list_1_1_0_t list)

 and field_list_1_1_0_t = 
   | FieldList_1_1_0_0 of pos_t * (ident_t * expr_t)

 and expr_list_t = (expr_t list)

 and expr_list_1_1_t = (expr_list_1_1_0_t list)

 and expr_list_1_1_0_t = 
   | ExprList_1_1_0_0 of pos_t * expr_t

 and ident_list_t = (ident_t list)

 and ident_list_1_1_t = (ident_list_1_1_0_t list)

 and ident_list_1_1_0_t = 
   | IdentList_1_1_0_0 of pos_t * string

 and field_t = (ident_t * expr_t)

 and bool_t = bool

(* data type for file positions *)
and pos_t = NoPos | Pos of string*int*int (* file,line,col *)

let filename = ref ""

exception Parse_error of string;;
exception Lexing_error of string;;
exception General_error of string;;

(* do_error p s
 *
 * Print error message
 *
 * p - the location of the error
 * s - the error message
 *
 * returns unit
 *)
let do_error (p : pos_t) (s : string) : string =
   ("Error"^
   (match p with
   | NoPos -> ""
   | Pos(file_name,line_num,col_num) -> (" in '"^file_name^
    "' on line "^(string_of_int line_num)^" col "^(string_of_int
    col_num))
   )^
   (": "^s^"\n"))
;;

let die_error (p : pos_t) (s : string) =
   raise (General_error(do_error p s))
;;

(* gets a pos data structure using the current lexing pos *)
let get_current_pos () =
   let p         = symbol_start_pos () in
   let file_name = !filename (*p.Lexing.pos_fname*)  in
   let line_num  = p.Lexing.pos_lnum   in
   let col_num   = (p.Lexing.pos_cnum-p.Lexing.pos_bol+1) in
   Pos(file_name,line_num,col_num)
;;

(* gets a pos data structure from a lexing position *)
let get_pos (p : Lexing.position) =
   let file_name = !filename (*p.Lexing.pos_fname*) in
   let line_num  = p.Lexing.pos_lnum  in
   let col_num   = (p.Lexing.pos_cnum-p.Lexing.pos_bol+1) in
   Pos(file_name,line_num,col_num)
;;

(* dies with a general position-based error *)
let pos_error (s : string) (p : position) = 
   do_error (get_pos p) s
;;

(* dies with a parse error s *)
let parse_error (s : string) = 
   raise (Parse_error(pos_error s (symbol_end_pos ())))
;;

(* dies with a lexing error *)
let lex_error (s : string) (lexbuf : Lexing.lexbuf) = 
   raise (Lexing_error(pos_error s (Lexing.lexeme_end_p lexbuf)))
;;

(* updates the lexer position to the next line
 * (this is used since we skip newlines in the
 *  lexer, but we still wish to remember them
 *  for proper line positions) *)
let do_newline lb = 
   Lexing.new_line lb
;;

(* dies with a system error s *)
let die_system_error (s : string) =
   output_string stderr s;
   output_string stderr "\n";
   exit 1
;;

let rec count_newlines s lb = match s with
  | "" -> 0
  | _  -> let c = String.sub s 0 1 in
          let cs = String.sub s 1 ((String.length s)-1) in
          if (c="\n") then (do_newline lb; 1+(count_newlines cs lb))
                      else (count_newlines cs lb)
;;



let rec str_typ (t : typ_t) = match t with
| UnitType -> "undefined"
| BoolType -> "boolean"
| NumType -> "number"
| StrType -> "string"
| TupleType(tl) -> Printf.sprintf "(%s)" (str_x_list str_typ tl ", ")
| FuncType(t1,t2) -> Printf.sprintf "%s -> %s" (str_typ t1) (str_typ t2)

let rec str_program (p : program_t) = match p with
  | ExprProgram(_,e) -> str_expr e
  | StmtProgram(_,s,p) -> Printf.sprintf "%s; %s" (str_stmt s) (str_program p)

and str_stmt (s : stmt_t) = match s with
  | ConstStmt(_,v,e) -> Printf.sprintf "const %s = %s" (str_ident v) (str_expr e)
  | LetStmt(_,v,e) -> Printf.sprintf "let %s = %s" (str_ident v) (str_expr e)
  | AssignStmt(_,e1,e2) -> Printf.sprintf "%s = %s" (str_expr e1) (str_expr e2)

and str_expr (e : expr_t) = match e with
  | VarExpr(_,v) -> Printf.sprintf "%s" (str_ident v)
  | ValExpr(_,v) -> Printf.sprintf "%s" (str_value v)
  | UopExpr(_,uop,e) -> Printf.sprintf "(%s %s)" (str_uop uop) (str_expr e)
  | BopExpr(_,e1,bop,e2) -> Printf.sprintf "(%s %s %s)" (str_expr e1) (str_bop bop) (str_expr e2)
  | CallExpr(_,e1,e2) -> Printf.sprintf "%s(%s)" (str_expr e1) (str_x_list str_expr e2 ", ")
  | IfExpr(_,e1,e2,e3) -> Printf.sprintf "(%s ? %s : %s)" (str_expr e1) (str_expr e2) (str_expr e3)
  | PrintExpr(_,e) -> Printf.sprintf "console.log(%s)" (str_expr e)
  | FieldExpr(_,e,f) -> Printf.sprintf "%s.%s" (str_expr e) (str_ident f)
  | ObjectExpr(_,fl) -> Printf.sprintf "{ %s }" (str_x_list (fun (f,e) -> Printf.sprintf "%s:%s" (str_ident f) (str_expr e)) fl ", ")

and str_bop (b : bop_t) = match b with
  | AndBop -> "&&"
  | OrBop -> "||"
  | PlusBop -> "+"
  | MinusBop -> "-"
  | TimesBop -> "*"
  | DivBop -> "/"
  | EqBop -> "==="
  | NeqBop -> "!=="
  | LtBop -> "<"
  | LteBop -> "<="
  | GtBop -> ">"
  | GteBop -> ">="

and str_uop (u : uop_t) = match u with
  | NotUop -> "!"
  | NegUop -> "-"

and str_value (v : value_t) = match v with
  | NumVal(n) -> string_of_float n
  | BoolVal(b) -> string_of_bool b
  | StrVal(s) -> s
  | UndefVal -> "undefined"
  | ClosureVal(_,(name,params,bl,_)) -> Printf.sprintf "function %s(%s) { %s }" (str_option (fun x -> x) name) (str_x_list str_typed_var params ", ") (str_block bl)
  | RefVal(_) -> failwith "cannot print reference"

and str_block (bl : block_t) = match bl with
  | ReturnBlock(_,e) -> Printf.sprintf "return %s" (str_expr e)
  | StmtBlock(_,s,bl) -> Printf.sprintf "%s; %s" (str_stmt s) (str_block bl)

and str_typed_var (tv : typed_ident_t) = match tv with
  | (v,t) -> v

and str_ident (x : ident_t) = x

let rec eq_typ (t1 : typ_t) (t2 : typ_t) = match (t1,t2) with
| (UnitType,UnitType) -> true
| (BoolType,BoolType) -> true
| (NumType,NumType) -> true
| (StrType,StrType) -> true
| (TupleType(tl1),TupleType(tl2)) -> eq_list eq_typ tl1 tl2
| (FuncType(ta1,tb1),FuncType(ta2,tb2)) -> (eq_typ ta1 ta2) && (eq_typ tb1 tb2)
| _ -> false

let rec eq_program (p1 : program_t) (p2 : program_t) = match (p1,p2) with
  | (ExprProgram(_,e1),ExprProgram(_,e2)) -> eq_expr e1 e2
  | (StmtProgram(_,s1,p1),StmtProgram(_,s2,p2)) -> (eq_stmt s1 s2) && (eq_program p1 p2)
  | _ -> false

and eq_stmt (s1 : stmt_t) (s2 : stmt_t) = match (s1,s2) with
  | (ConstStmt(_,v1,e1),ConstStmt(_,v2,e2)) -> (eq_ident v1 v2) && (eq_expr e1 e2)
  | (LetStmt(_,v1,e1),LetStmt(_,v2,e2)) -> (eq_ident v1 v2) && (eq_expr e1 e2)
  | (AssignStmt(_,ea1,eb1),AssignStmt(_,ea2,eb2)) -> (eq_expr ea1 ea2) && (eq_expr eb1 eb2)
  | _ -> false

and eq_expr (e1 : expr_t) (e2 : expr_t) = match (e1,e2) with
  | (VarExpr(_,v1),VarExpr(_,v2)) -> eq_ident v1 v2
  | (ValExpr(_,v1),ValExpr(_,v2)) -> eq_value v1 v2
  | (UopExpr(_,uop1,e1),UopExpr(_,uop2,e2)) -> (eq_uop uop1 uop2) && (eq_expr e1 e2)
  | (BopExpr(_,ea1,bop1,eb1),BopExpr(_,ea2,bop2,eb2)) -> (eq_expr ea1 ea2) && (eq_bop bop1 bop2) && (eq_expr ea2 eb2)
  | (CallExpr(_,ea1,eb1),CallExpr(_,ea2,eb2)) -> (eq_expr ea1 ea2) && (eq_list eq_expr eb1 eb2)
  | (IfExpr(_,ea1,eb1,ec1),IfExpr(_,ea2,eb2,ec2)) -> (eq_expr ea1 ea2) && (eq_expr eb1 eb2) && (eq_expr ec1 ec2)
  | (PrintExpr(_,e1),PrintExpr(_,e2)) -> eq_expr e1 e2
  | (FieldExpr(_,e1,f1),FieldExpr(_,e2,f2)) -> (eq_expr e1 e2) && (eq_ident f1 f2)
  | (ObjectExpr(_,fl1),ObjectExpr(_,fl2)) -> eq_list (fun (i1,e1) (i2,e2) -> (eq_ident i2 i2) && (eq_expr e1 e2)) fl1 fl2
  | _ -> false

and eq_bop (b1 : bop_t) (b2 : bop_t) = match (b1,b2) with
  | (AndBop,AndBop) -> true
  | (OrBop,OrBop) -> true
  | (PlusBop,PlusBop) -> true
  | (MinusBop,MinusBop) -> true
  | (TimesBop,TimesBop) -> true
  | (DivBop,DivBop) -> true
  | (EqBop,EqBop) -> true
  | (NeqBop,NeqBop) -> true
  | (LtBop,LtBop) -> true
  | (LteBop,LteBop) -> true
  | (GtBop,GtBop) -> true
  | (GteBop,GteBop) -> true
  | _ -> false

and eq_uop (u : uop_t) (u : uop_t) = match (u,u) with
  | (NotUop,NotUop) -> true
  | (NegUop,NegUop) -> true
  | _ -> false

and eq_value (v1 : value_t) (v2 : value_t) = match (v1,v2) with
  | (NumVal(n1),NumVal(n2)) -> n1=n2
  | (BoolVal(b1),BoolVal(b2)) -> b1=b2
  | (StrVal(s1),StrVal(s2)) -> s1=s2
  | (UndefVal,UndefVal) -> true
  | (ClosureVal(_,(name1,params1,bl1,t1)),ClosureVal(_,(name2,params2,bl2,t2))) ->
    (eq_option eq_ident name1 name2) && (eq_list eq_typed_var params1 params2)
    && (eq_block bl1 bl2) && (eq_option eq_typ t1 t2)
  | (RefVal(a1),RefVal(a2)) -> a1=a2
  | _ -> false

and eq_block (bl1 : block_t) (bl2 : block_t) = match (bl1,bl2) with
  | (ReturnBlock(_,e1),ReturnBlock(_,e2)) -> eq_expr e1 e2
  | (StmtBlock(_,s1,bl1),StmtBlock(_,s2,bl2)) -> (eq_stmt s1 s2) && (eq_block bl1 bl2)
  | _ -> false

and eq_typed_var (tv1 : typed_ident_t) (tv2 : typed_ident_t) = match (tv1,tv2) with
  | ((v1,t1),(v2,t2)) -> (eq_ident v1 v2) && (eq_option eq_typ t1 t2)

and eq_ident (x1 : ident_t) (x2 : ident_t) =
  (x1=x2)
