(*
 * THIS IS AN AUTO-GENERATED FILE PRODUCED BY URUZ!
 * DO NOT EDIT THIS FILE, since any changes will be
 * lost when the build is reset via "make clean".
 * This file is based on a user-specified EBNF
 * grammar, which can be edited as desired.
 *)

open Javascript_utils;;

(* AST Data Structure *)

type start_t = program_t

 and program_t = 
   | ExprProgram of pos_t * expr_t
   | StmtProgram of pos_t * stmt_t * program_t

 and stmt_t = 
   | ConstStmt of pos_t * ident_t * expr_t
   | LetStmt of pos_t * ident_t * expr_t
   | AssignStmt of pos_t * expr_t * expr_t

 and typ_t = 
   | UnitType
   | BoolType
   | NumType
   | StrType
   | TupleType of typ_t list
   | FuncType of typ_t * typ_t

 and var_access_t = 
   | Mutable
   | Immutable

 and uop_t = 
   | NotUop
   | NegUop

 and bop_t = 
   | AndBop
   | OrBop
   | PlusBop
   | MinusBop
   | TimesBop
   | DivBop
   | EqBop
   | NeqBop
   | LtBop
   | LteBop
   | GtBop
   | GteBop

 and expr_t = 
   | VarExpr of pos_t * ident_t
   | ValExpr of pos_t * value_t
   | UopExpr of pos_t * uop_t * expr_t
   | BopExpr of pos_t * expr_t * bop_t * expr_t
   | IfExpr of pos_t * expr_t * expr_t * expr_t
   | PrintExpr of pos_t * expr_t
   | CallExpr of pos_t * expr_t * expr_t list
   | FieldExpr of pos_t * expr_t * ident_t
   | ObjectExpr of pos_t * field_t list

 and expr1_t = expr_t

 and value_t = 
   | NumVal of float
   | BoolVal of bool
   | StrVal of string
   | UndefVal
   | ClosureVal of name_map_t * lambda_t
   | RefVal of address_t

 and ident_t = string

 and address_t = int

 and typed_ident_t = (ident_t * typ_t option)

 and name_map_t = (int StringMap.t)

 and lambda_t = (ident_t option * typed_ident_t list * block_t * typ_t option)

 and value1_t = value_t

 and lambda1_t = lambda_t

 and lambda1_0_1_t = (string option)

 and block_t = 
   | ReturnBlock of pos_t * expr_t
   | StmtBlock of pos_t * stmt_t * block_t

 and field_list_t = (field_t list)

 and field_list_1_1_t = (field_list_1_1_0_t list)

 and field_list_1_1_0_t = 
   | FieldList_1_1_0_0 of pos_t * (ident_t * expr_t)

 and expr_list_t = (expr_t list)

 and expr_list_1_1_t = (expr_list_1_1_0_t list)

 and expr_list_1_1_0_t = 
   | ExprList_1_1_0_0 of pos_t * expr_t

 and ident_list_t = (ident_t list)

 and ident_list_1_1_t = (ident_list_1_1_0_t list)

 and ident_list_1_1_0_t = 
   | IdentList_1_1_0_0 of pos_t * string

 and field_t = (ident_t * expr_t)

 and bool_t = bool

let rec str_program (p : program_t) = match p with
  | ExprProgram(_,e) -> str_expr e
  | StmtProgram(_,s,p) -> Printf.sprintf "%s; %s" (str_stmt s) (str_program p)

and str_stmt (s : stmt_t) = match s with
  | ConstStmt(_,v,e) -> Printf.sprintf "const %s = %s" (str_ident v) (str_expr e)
  | LetStmt(_,v,e) -> Printf.sprintf "let %s = %s" (str_ident v) (str_expr e)
  | AssignStmt(_,e1,e2) -> Printf.sprintf "%s = %s" (str_expr e1) (str_expr e2)

and str_expr (e : expr_t) = match e with
  | VarExpr(_,v) -> Printf.sprintf "%s" (str_ident v)
  | ValExpr(_,v) -> Printf.sprintf "%s" (str_value v)
  | UopExpr(_,uop,e) -> Printf.sprintf "(%s %s)" (str_uop uop) (str_expr e)
  | BopExpr(_,e1,bop,e2) -> Printf.sprintf "(%s %s %s)" (str_expr e1) (str_bop bop) (str_expr e2)
  | CallExpr(_,e1,e2) -> Printf.sprintf "%s(%s)" (str_expr e1) (str_x_list str_expr e2 ", ")
  | IfExpr(_,e1,e2,e3) -> Printf.sprintf "(%s ? %s : %s)" (str_expr e1) (str_expr e2) (str_expr e3)
  | PrintExpr(_,e) -> Printf.sprintf "console.log(%s)" (str_expr e)
  | FieldExpr(_,e,f) -> Printf.sprintf "%s.%s" (str_expr e) (str_ident f)
  | ObjectExpr(_,fl) -> Printf.sprintf "{ %s }" (str_x_list (fun (f,e) -> Printf.sprintf "%s:%s" (str_ident f) (str_expr e)) fl ", ")

and str_bop (b : bop_t) = match b with
  | AndBop -> "&&"
  | OrBop -> "||"
  | PlusBop -> "+"
  | MinusBop -> "-"
  | TimesBop -> "*"
  | DivBop -> "/"
  | EqBop -> "==="
  | NeqBop -> "!=="
  | LtBop -> "<"
  | LteBop -> "<="
  | GtBop -> ">"
  | GteBop -> ">="

and str_uop (u : uop_t) = match u with
  | NotUop -> "!"
  | NegUop -> "-"

and str_value (v : value_t) = match v with
  | NumVal(n) -> string_of_float n
  | BoolVal(b) -> string_of_bool b
  | StrVal(s) -> s
  | UndefVal -> "undefined"
  | ClosureVal(_,(name,params,bl,_)) -> Printf.sprintf "function %s(%s) { %s }" (str_option (fun x -> x) name) (str_x_list str_typed_var params ", ") (str_block bl)
  | RefVal(_) -> failwith "cannot print reference"

and str_block (bl : block_t) = match bl with
  | ReturnBlock(_,e) -> Printf.sprintf "return %s" (str_expr e)
  | StmtBlock(_,s,bl) -> Printf.sprintf "%s; %s" (str_stmt s) (str_block bl)

and str_typed_var (tv : typed_ident_t) = match tv with
  | (v,t) -> v

and str_ident (x : ident_t) = x
